name: 2ly
services:
  # NATS with JetStream for persistence
  nats:
    image: nats:2.10-alpine
    container_name: 2ly-nats
    ports:
      - '4222:4222' # Client connections
      - '8222:8222' # HTTP monitoring
    command: [ '--jetstream', '--store_dir=/data', '--http_port=8222', '--server_name=2ly-nats-01' ]
    volumes:
      - nats_data:/data
    networks:
      - 2ly-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8222/healthz' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # NATS Dashboard for monitoring
  nats-dashboard:
    image: mdawar/nats-dashboard:latest
    container_name: 2ly-nats-dashboard
    ports:
      - '8001:80'
    volumes:
      - ./nats-dashboard-config.json:/srv/config.json
    depends_on:
      - nats
    networks:
      - 2ly-network
    restart: unless-stopped
    profiles:
      - development

  # DGraph Zero (cluster coordination)
  dgraph-zero:
    image: dgraph/dgraph:latest
    container_name: 2ly-dgraph-zero
    ports:
      - '5080:5080' # internal gRPC
      - '6080:6080' # HTTP
    command: dgraph zero --my=dgraph-zero:5080
    volumes:
      - dgraph_zero:/dgraph
    networks:
      - 2ly-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:6080/health' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # DGraph Alpha (data node)
  dgraph-alpha:
    image: dgraph/dgraph:latest
    container_name: 2ly-dgraph-alpha
    ports:
      - '7080:7080' # internal gRPC
      - '8080:8080' # HTTP/GraphQL
      - '9080:9080' # external gRPC private
    command: dgraph alpha --my=dgraph-alpha:7080 --zero=dgraph-zero:5080 --security whitelist=172.20.0.0/8,127.0.0.1/32,192.168.0.0/16
    volumes:
      - dgraph_data:/dgraph
    depends_on:
      dgraph-zero:
        condition: service_healthy
    networks:
      - 2ly-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:8080/health' ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 2LY Backend
  backend:
    image: ghcr.io/alpinai/backend:latest
    container_name: 2ly-backend
    environment:
      - NODE_ENV=production
      - CORS_ORIGINS=/.2ly.ai$/,http://localhost:8888,http://localhost:3000
      - DGRAPH_URL=dgraph-alpha:8080
      - NATS_SERVERS=nats:4222
      - EXPOSED_NATS_SERVERS=localhost:4222
      - ENCRYPTION_KEY=zR6xG6E9#h@dNquSM&DYwM#trbmn%nzR
    ports:
      - 3000:3000
    volumes:
      - backend_logs:/app/logs
    depends_on:
      nats:
        condition: service_started
      dgraph-alpha:
        condition: service_healthy
    networks:
      - 2ly-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'curl', '-f', 'http://localhost:3000/health' ]
      interval: 5s
      timeout: 3s
      retries: 10

  # 2LY Tool Runtime
  main-runtime:
    image: ghcr.io/alpinai/runtime:latest
    container_name: 2ly-main-runtime
    environment:
      - NATS_SERVERS=nats:4222
      - RUNTIME_NAME=Main Runtime
      - GLOBAL_RUNTIME=true
      - DEFAULT_TESTING_RUNTIME=true
      - ROOTS=TEMP:/tmp
      - AGENT_SERVER_TRANSPORT=stream
      - AGENT_SERVER_TRANSPORT_PORT=3001
    ports:
      - 3001:3001
    volumes:
      - main-runtime_logs:/app/logs
    depends_on:
      nats:
        condition: service_started
      dgraph-alpha:
        condition: service_healthy
    networks:
      - 2ly-network
    restart: unless-stopped

  # 2LY Frontend
  frontend:
    image: ghcr.io/alpinai/frontend:latest
    container_name: 2ly-frontend
    ports:
      - 8888:80
    networks:
      - 2ly-network
    restart: unless-stopped

  # 2LY Doc
  doc:
    image: ghcr.io/alpinai/doc:latest
    container_name: 2ly-doc
    ports:
      - 3010:3000
    networks:
      - 2ly-network
    restart: unless-stopped

volumes:
  nats_data:
    driver: local
  dgraph_data:
    driver: local
  dgraph_zero:
    driver: local
  backend_logs:
    driver: local
  main-runtime_logs:
    driver: local

networks:
  2ly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
