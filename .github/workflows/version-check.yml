name: Version Validation

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  validate-versions:
    name: Validate Package Versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to check tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Check version consistency
        id: version-check
        run: |
          echo "Checking version consistency across packages..."

          # Extract versions from each package.json
          BACKEND_VERSION=$(node -p "require('./packages/backend/package.json').version")
          FRONTEND_VERSION=$(node -p "require('./packages/frontend/package.json').version")
          RUNTIME_VERSION=$(node -p "require('./packages/runtime/package.json').version")
          COMMON_VERSION=$(node -p "require('./packages/common/package.json').version")
          DOC_VERSION=$(node -p "require('./packages/doc/package.json').version")

          echo "Package versions:"
          echo "  Backend:  $BACKEND_VERSION"
          echo "  Frontend: $FRONTEND_VERSION"
          echo "  Runtime:  $RUNTIME_VERSION"
          echo "  Common:   $COMMON_VERSION"
          echo "  Doc:      $DOC_VERSION"

          # Check if all versions match
          if [ "$BACKEND_VERSION" != "$FRONTEND_VERSION" ] || \
             [ "$BACKEND_VERSION" != "$RUNTIME_VERSION" ] || \
             [ "$BACKEND_VERSION" != "$COMMON_VERSION" ] || \
             [ "$BACKEND_VERSION" != "$DOC_VERSION" ]; then
            echo ""
            echo "❌ Version mismatch detected!"
            echo "All packages must have the same version before merging to main."
            echo ""
            echo "Please update all package.json files to use the same version."
            exit 1
          fi

          echo ""
          echo "✅ All package versions match: $BACKEND_VERSION"
          echo "version=$BACKEND_VERSION" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        run: |
          VERSION="${{ steps.version-check.outputs.version }}"
          TAG="v$VERSION"

          echo "Checking if tag $TAG already exists..."

          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo ""
            echo "❌ Tag $TAG already exists in the repository!"
            echo "This version has already been released."
            echo ""
            echo "Please bump the version in all package.json files before merging."
            exit 1
          fi

          echo ""
          echo "✅ Tag $TAG does not exist - version is available for release"

      - name: All checks passed
        run: |
          VERSION="${{ steps.version-check.outputs.version }}"
          echo ""
          echo "✅ Version validation successful!"
          echo ""
          echo "  ✓ All packages use version: $VERSION"
          echo "  ✓ Version tag v$VERSION is available"
          echo ""
          echo "This PR can be safely merged to main."
