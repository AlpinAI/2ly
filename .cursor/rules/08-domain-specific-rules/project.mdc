---
description: 
globs: 
alwaysApply: true
---
2ly is an AI tool management application designed to connect MCP Tools to Agent runtimes in an orchestrated and distributed way.

This project is a monorepo with
- common package for shared code, schema
- backend package, acting as an orchestrator for tools and agents runtimes
- runtime package, which are NodeJS processes which run on the edge and are connected to the backend orchestrator via a NATS bus
- frontend package, which is an web-app to manage MCP servers, tools and agents capabilities

The stack:
- dgraph database
- NATS bus, with jetstream
- NodeJS backend, connected to dgraph using the graphql http endpoint
- NodeJS runtimes, connected to the backend orchestrator via NATS
- react frontend with tailwind for styling
- dependency injection using inversify, containers are located in /di/container.ts on each project

Common architecture
- Each package have a /services directory containing injectable services
- Each service must serve a single purpose with clear boundaries and exposing only the minimal API (good encapsulation)

Runtime specificity:
- A runtime can be started as a "Tool Runtime" or "Agent Runtime", according the an ENV variable

Best practice
- Prefer small files with clear responsibilities. When a file becomes too big, split in smaller chunks with proper encapsulation. Respect the service architecture
