/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/auth/dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange DNS signature for Registry JWT
         * @description Authenticate using DNS TXT record public key and signed timestamp
         */
        post: operations["exchange-dns-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/auth/github-at": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange GitHub OAuth access token for Registry JWT
         * @description Exchange a GitHub OAuth access token for a short-lived Registry JWT token
         */
        post: operations["exchange-github-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/auth/github-oidc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange GitHub OIDC token for Registry JWT
         * @description Exchange a GitHub Actions OIDC token for a short-lived Registry JWT token
         */
        post: operations["exchange-github-oidc-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/auth/http": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange HTTP signature for Registry JWT
         * @description Authenticate using HTTP-hosted public key and signed timestamp
         */
        post: operations["exchange-http-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/auth/oidc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Exchange OIDC ID token for Registry JWT
         * @description Exchange an OIDC ID token from any configured provider for a short-lived Registry JWT token
         */
        post: operations["exchange-oidc-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check the health status of the API
         */
        get: operations["get-health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description Simple ping endpoint
         */
        get: operations["ping"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish MCP server
         * @description Publish a new MCP server to the registry or update an existing one
         */
        post: operations["publish-server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List MCP servers
         * @description Get a paginated list of MCP servers from the registry
         */
        get: operations["list-servers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers/{serverName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MCP server details
         * @description Get detailed information about the latest version of a specific MCP server.
         */
        get: operations["get-server"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers/{serverName}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all versions of an MCP server
         * @description Get all available versions for a specific MCP server
         */
        get: operations["get-server-versions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/servers/{serverName}/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific MCP server version
         * @description Get detailed information about a specific version of an MCP server.
         */
        get: operations["get-server-version"];
        /**
         * Edit MCP server
         * @description Update a specific version of an existing MCP server (admin only).
         */
        put: operations["edit-server"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Argument: {
            choices?: string[] | null;
            default?: string;
            description?: string;
            format?: string;
            isRepeated?: boolean;
            isRequired?: boolean;
            isSecret?: boolean;
            name?: string;
            type: string;
            value?: string;
            valueHint?: string;
            variables?: {
                [key: string]: components["schemas"]["Input"];
            };
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * @description A human-readable explanation specific to this occurrence of the problem.
             * @example Property foo is required but is missing.
             */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             * @example https://example.com/error-log/abc123
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             * @example 400
             */
            status?: number;
            /**
             * @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
             * @example Bad Request
             */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             * @example https://example.com/errors/example
             */
            type: string;
        };
        GitHubOIDCTokenExchangeInputBody: {
            /** @description GitHub Actions OIDC token */
            oidc_token: string;
        };
        GitHubTokenExchangeInputBody: {
            /** @description GitHub OAuth token */
            github_token: string;
        };
        HealthBody: {
            /** @description GitHub OAuth App Client ID */
            github_client_id?: string;
            /**
             * @description Health status
             * @example ok
             */
            status: string;
        };
        Input: {
            choices?: string[] | null;
            default?: string;
            description?: string;
            format?: string;
            isRequired?: boolean;
            isSecret?: boolean;
            value?: string;
        };
        KeyValueInput: {
            choices?: string[] | null;
            default?: string;
            description?: string;
            format?: string;
            isRequired?: boolean;
            isSecret?: boolean;
            name: string;
            value?: string;
            variables?: {
                [key: string]: components["schemas"]["Input"];
            };
        };
        Metadata: {
            /** Format: int64 */
            count: number;
            nextCursor?: string;
        };
        OIDCTokenExchangeInputBody: {
            /** @description OIDC ID token from any provider */
            oidc_token: string;
        };
        Package: {
            environmentVariables?: components["schemas"]["KeyValueInput"][] | null;
            fileSha256?: string;
            identifier: string;
            packageArguments?: components["schemas"]["Argument"][] | null;
            registryBaseUrl?: string;
            registryType: string;
            runtimeArguments?: components["schemas"]["Argument"][] | null;
            runtimeHint?: string;
            transport?: components["schemas"]["Transport"];
            version: string;
        };
        PingBody: {
            /**
             * @description Ping response
             * @example true
             */
            pong: boolean;
        };
        RegistryExtensions: {
            isLatest: boolean;
            /** Format: date-time */
            publishedAt: string;
            status: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Repository: {
            id?: string;
            source: string;
            subfolder?: string;
            url: string;
        };
        ResponseMeta: {
            "io.modelcontextprotocol.registry/official"?: components["schemas"]["RegistryExtensions"];
        };
        ServerJSON: {
            $schema?: string;
            _meta?: components["schemas"]["ServerMeta"];
            description: string;
            name: string;
            packages?: components["schemas"]["Package"][] | null;
            remotes?: components["schemas"]["Transport"][] | null;
            repository?: components["schemas"]["Repository"];
            version: string;
            websiteUrl?: string;
        };
        ServerListResponse: {
            metadata: components["schemas"]["Metadata"];
            servers: components["schemas"]["ServerResponse"][] | null;
        };
        ServerMeta: {
            "io.modelcontextprotocol.registry/publisher-provided"?: {
                [key: string]: unknown;
            };
        };
        ServerResponse: {
            _meta: components["schemas"]["ResponseMeta"];
            server: components["schemas"]["ServerJSON"];
        };
        SignatureTokenExchangeInput: {
            /**
             * @description Domain name
             * @example example.com
             */
            domain: string;
            /**
             * @description Hex-encoded Ed25519 signature of timestamp
             * @example abcdef1234567890
             */
            signed_timestamp: string;
            /**
             * @description RFC3339 timestamp
             * @example 2023-01-01T00:00:00Z
             */
            timestamp: string;
        };
        TokenResponse: {
            /** Format: int64 */
            expires_at: number;
            registry_token: string;
        };
        Transport: {
            headers?: components["schemas"]["KeyValueInput"][] | null;
            type: string;
            url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "exchange-dns-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignatureTokenExchangeInput"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "exchange-github-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GitHubTokenExchangeInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "exchange-github-oidc-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GitHubOIDCTokenExchangeInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "exchange-http-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignatureTokenExchangeInput"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "exchange-oidc-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OIDCTokenExchangeInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PingBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "publish-server": {
        parameters: {
            query?: never;
            header: {
                /** @description Registry JWT token (obtained from /v0/auth/token/github) */
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerJSON"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "list-servers": {
        parameters: {
            query?: {
                /**
                 * @description Pagination cursor
                 * @example server-cursor-123
                 */
                cursor?: string;
                /**
                 * @description Number of items per page
                 * @example 50
                 */
                limit?: number;
                /**
                 * @description Filter servers updated since timestamp (RFC3339 datetime)
                 * @example 2025-08-07T13:15:04.280Z
                 */
                updated_since?: string;
                /**
                 * @description Search servers by name (substring match)
                 * @example filesystem
                 */
                search?: string;
                /**
                 * @description Filter by version ('latest' for latest version, or an exact version like '1.2.3')
                 * @example latest
                 */
                version?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-server": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description URL-encoded server name
                 * @example com.example%2Fmy-server
                 */
                serverName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-server-versions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description URL-encoded server name
                 * @example com.example%2Fmy-server
                 */
                serverName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-server-version": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description URL-encoded server name
                 * @example com.example%2Fmy-server
                 */
                serverName: string;
                /**
                 * @description URL-encoded server version
                 * @example 1.0.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "edit-server": {
        parameters: {
            query?: {
                /** @description New status for the server (active, deprecated, deleted) */
                status?: "active" | "deprecated" | "deleted";
            };
            header: {
                /** @description Registry JWT token with edit permissions */
                Authorization: string;
            };
            path: {
                /**
                 * @description URL-encoded server name
                 * @example com.example%2Fmy-server
                 */
                serverName: string;
                /**
                 * @description URL-encoded version to edit
                 * @example 1.0.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerJSON"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerResponse"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
