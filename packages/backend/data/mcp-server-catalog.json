{
  "version": "1.0.0",
  "description": "Pre-configured MCP servers for common use cases",
  "servers": [
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Filesystem MCP Server",
      "description": "File system operations including read, write, and directory management",
      "repositoryUrl": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
      "transport": "STDIO",
      "command": "npx",
      "args": "@modelcontextprotocol/server-filesystem $PATH",
      "config": {
        "schema": {
          "type": "object",
          "required": [],
          "properties": {
            "PATH": {
              "type": "string",
              "description": "The file system path to be accessed by the MCP server, you can add multiple paths separated by a comma",
              "examples": [
                "/path/to/example"
              ]
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "GitHub MCP Server (PAT)",
      "description": "GitHub integration for repository management, issue tracking, and code operations",
      "repositoryUrl": "https://github.com/github/github-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.githubcopilot.com/mcp/",
      "headers": "Authorization: Bearer $PAT",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "PAT"
          ],
          "properties": {
            "PAT": {
              "type": "string",
              "description": "GitHub Personal Access Token (PAT)",
              "examples": [
                "ghp_1234567890"
              ]
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Docker based Filesystem MCP Server",
      "description": "File system operations including read, write, and directory management",
      "repositoryUrl": "https://github.com/modelcontextprotocol/server-filesystem",
      "transport": "STDIO",
      "command": "docker",
      "args": "run -i --rm --mount type=bind,src=$PATH,dst=/projects/path mcp/filesystem /projects",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "PATH"
          ],
          "properties": {
            "PATH": {
              "type": "string",
              "description": "The file system path to be accessed by the MCP server, you cannot add multiple paths separated by a comma"
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "OpenAI MCP Server",
      "description": "Access OpenAI APIs for completion, embedding, and moderation",
      "repositoryUrl": "https://github.com/example/openai-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.example.com/mcp/openai"
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Slack MCP Server",
      "description": "Interact with Slack channels, messages, and files",
      "repositoryUrl": "https://github.com/example/slack-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.example.com/mcp/slack"
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Jira MCP Server",
      "description": "Create and manage Jira issues, projects, and workflows",
      "repositoryUrl": "https://github.com/example/jira-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.example.com/mcp/jira"
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Notion MCP Server",
      "description": "Read and write Notion pages and databases",
      "repositoryUrl": "https://github.com/example/notion-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.example.com/mcp/notion"
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Trello MCP Server",
      "description": "Manage Trello boards, lists, and cards",
      "repositoryUrl": "https://github.com/example/trello-mcp-server",
      "transport": "STREAM",
      "serverUrl": "https://api.example.com/mcp/trello"
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "PostgreSQL MCP Server",
      "description": "Query and manage PostgreSQL databases",
      "repositoryUrl": "https://github.com/example/postgres-mcp-server",
      "transport": "STDIO",
      "command": "npx",
      "args": "@example/postgres-mcp $CONNECTION_STRING",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "CONNECTION_STRING"
          ],
          "properties": {
            "CONNECTION_STRING": {
              "type": "string",
              "description": "PostgreSQL connection string"
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Redis MCP Server",
      "description": "Inspect and interact with Redis data structures",
      "repositoryUrl": "https://github.com/example/redis-mcp-server",
      "transport": "STDIO",
      "command": "npx",
      "args": "@example/redis-mcp $URL",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "URL"
          ],
          "properties": {
            "URL": {
              "type": "string",
              "description": "Redis connection URL (redis://host:port)"
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Browser MCP Server",
      "description": "Headless browsing and content extraction",
      "repositoryUrl": "https://github.com/example/browser-mcp-server",
      "transport": "STDIO",
      "command": "npx",
      "args": "@example/browser-mcp $URL",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "URL"
          ],
          "properties": {
            "URL": {
              "type": "string",
              "description": "Starting URL for the browser session"
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "S3 MCP Server",
      "description": "List and manage S3 buckets and objects",
      "repositoryUrl": "https://github.com/example/s3-mcp-server",
      "transport": "STDIO",
      "command": "npx",
      "args": "@example/s3-mcp $BUCKET",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "BUCKET"
          ],
          "properties": {
            "BUCKET": {
              "type": "string",
              "description": "Default S3 bucket name"
            }
          }
        }
      }
    },
    {
      "_2ly": {
        "registryVersion": "1.0.0"
      },
      "name": "Kubernetes MCP Server",
      "description": "Inspect Kubernetes clusters and apply manifests",
      "repositoryUrl": "https://github.com/example/kubernetes-mcp-server",
      "transport": "STDIO",
      "command": "npx",
      "args": "@example/kubernetes-mcp $CONTEXT",
      "config": {
        "schema": {
          "type": "object",
          "required": [
            "CONTEXT"
          ],
          "properties": {
            "CONTEXT": {
              "type": "string",
              "description": "Kubeconfig context name"
            }
          }
        }
      }
    }
  ]
}